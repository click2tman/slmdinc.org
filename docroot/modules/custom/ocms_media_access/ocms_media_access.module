<?php

/**
 * @file
 * Provides media access permissions by entity type.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function ocms_media_access_media_access(EntityInterface $entity, $operation, AccountInterface $account) {

  $type = $entity->bundle();

  switch ($operation) {
    case 'create':
      return AccessResult::allowedIfHasPermission($account, 'create ' . $type . ' media');

    case 'update':
      if ($account->hasPermission('edit any ' . $type . ' media', $account)) {
        return AccessResult::allowed()->cachePerPermissions();
      }
      else {
        return AccessResult::allowedIf($account->hasPermission('edit own ' . $type . ' media', $account) && ($account->id() == $entity->getPublisherId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency($entity);
      }

    case 'delete':
      if ($account->hasPermission('delete any ' . $type . ' media', $account)) {
        return AccessResult::allowed()->cachePerPermissions();
      }
      else {
        return AccessResult::allowedIf($account->hasPermission('delete own ' . $type . ' media', $account) && ($account->id() == $entity->getPublisherId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency($entity);
      }
  }
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function ocms_media_access_media_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return AccessResult::allowedIfHasPermission($account, 'create ' . $entity_bundle . ' media');
}